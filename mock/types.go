// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStub is a mock of Stub interface
type MockStub struct {
	ctrl     *gomock.Controller
	recorder *MockStubMockRecorder
}

// MockStubMockRecorder is the mock recorder for MockStub
type MockStubMockRecorder struct {
	mock *MockStub
}

// NewMockStub creates a new mock instance
func NewMockStub(ctrl *gomock.Controller) *MockStub {
	mock := &MockStub{ctrl: ctrl}
	mock.recorder = &MockStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStub) EXPECT() *MockStubMockRecorder {
	return m.recorder
}

// Stub mocks base method
func (m *MockStub) Stub() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stub")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stub indicates an expected call of Stub
func (mr *MockStubMockRecorder) Stub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stub", reflect.TypeOf((*MockStub)(nil).Stub))
}

// MockAssertion is a mock of Assertion interface
type MockAssertion struct {
	ctrl     *gomock.Controller
	recorder *MockAssertionMockRecorder
}

// MockAssertionMockRecorder is the mock recorder for MockAssertion
type MockAssertionMockRecorder struct {
	mock *MockAssertion
}

// NewMockAssertion creates a new mock instance
func NewMockAssertion(ctrl *gomock.Controller) *MockAssertion {
	mock := &MockAssertion{ctrl: ctrl}
	mock.recorder = &MockAssertionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssertion) EXPECT() *MockAssertionMockRecorder {
	return m.recorder
}

// Assert mocks base method
func (m *MockAssertion) Assert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Assert indicates an expected call of Assert
func (mr *MockAssertionMockRecorder) Assert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assert", reflect.TypeOf((*MockAssertion)(nil).Assert))
}

// MockCleaner is a mock of Cleaner interface
type MockCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockCleanerMockRecorder
}

// MockCleanerMockRecorder is the mock recorder for MockCleaner
type MockCleanerMockRecorder struct {
	mock *MockCleaner
}

// NewMockCleaner creates a new mock instance
func NewMockCleaner(ctrl *gomock.Controller) *MockCleaner {
	mock := &MockCleaner{ctrl: ctrl}
	mock.recorder = &MockCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleaner) EXPECT() *MockCleanerMockRecorder {
	return m.recorder
}

// Clean mocks base method
func (m *MockCleaner) Clean() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean
func (mr *MockCleanerMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockCleaner)(nil).Clean))
}
